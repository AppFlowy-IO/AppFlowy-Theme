// Mocks generated by Mockito 5.4.0 from annotations
// in appflowy_theme_marketplace/test/auth/supabase_auth_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i7;

import 'package:appflowy_theme_marketplace/src/authentication/domain/models/user.dart'
    as _i5;
import 'package:gotrue/gotrue.dart' as _i2;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoTrueAdminApi_0 extends _i1.SmartFake
    implements _i2.GoTrueAdminApi {
  _FakeGoTrueAdminApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueMFAApi_1 extends _i1.SmartFake implements _i2.GoTrueMFAApi {
  _FakeGoTrueMFAApi_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResponse_2 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOAuthResponse_3 extends _i1.SmartFake implements _i2.OAuthResponse {
  _FakeOAuthResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResendResponse_4 extends _i1.SmartFake
    implements _i2.ResendResponse {
  _FakeResendResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserResponse_5 extends _i1.SmartFake implements _i2.UserResponse {
  _FakeUserResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthSessionUrlResponse_6 extends _i1.SmartFake
    implements _i2.AuthSessionUrlResponse {
  _FakeAuthSessionUrlResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_7 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_8 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GoTrueClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoTrueClient extends _i1.Mock implements _i2.GoTrueClient {
  @override
  _i2.GoTrueAdminApi get admin => (super.noSuchMethod(
        Invocation.getter(#admin),
        returnValue: _FakeGoTrueAdminApi_0(
          this,
          Invocation.getter(#admin),
        ),
        returnValueForMissingStub: _FakeGoTrueAdminApi_0(
          this,
          Invocation.getter(#admin),
        ),
      ) as _i2.GoTrueAdminApi);
  @override
  set admin(_i2.GoTrueAdminApi? _admin) => super.noSuchMethod(
        Invocation.setter(
          #admin,
          _admin,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.GoTrueMFAApi get mfa => (super.noSuchMethod(
        Invocation.getter(#mfa),
        returnValue: _FakeGoTrueMFAApi_1(
          this,
          Invocation.getter(#mfa),
        ),
        returnValueForMissingStub: _FakeGoTrueMFAApi_1(
          this,
          Invocation.getter(#mfa),
        ),
      ) as _i2.GoTrueMFAApi);
  @override
  set mfa(_i2.GoTrueMFAApi? _mfa) => super.noSuchMethod(
        Invocation.setter(
          #mfa,
          _mfa,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i2.AuthState> get onAuthStateChange => (super.noSuchMethod(
        Invocation.getter(#onAuthStateChange),
        returnValue: _i4.Stream<_i2.AuthState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.AuthState>.empty(),
      ) as _i4.Stream<_i2.AuthState>);
  @override
  _i4.Stream<_i2.AuthState> get onAuthStateChangeSync => (super.noSuchMethod(
        Invocation.getter(#onAuthStateChangeSync),
        returnValue: _i4.Stream<_i2.AuthState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.AuthState>.empty(),
      ) as _i4.Stream<_i2.AuthState>);
  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  _i4.Future<_i2.AuthResponse> signUp({
    String? email,
    String? phone,
    required String? password,
    String? emailRedirectTo,
    Map<String, dynamic>? data,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #phone: phone,
            #password: password,
            #emailRedirectTo: emailRedirectTo,
            #data: data,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #phone: phone,
              #password: password,
              #emailRedirectTo: emailRedirectTo,
              #data: data,
              #captchaToken: captchaToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #phone: phone,
              #password: password,
              #emailRedirectTo: emailRedirectTo,
              #data: data,
              #captchaToken: captchaToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<_i2.AuthResponse> signInWithPassword({
    String? email,
    String? phone,
    required String? password,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPassword,
          [],
          {
            #email: email,
            #phone: phone,
            #password: password,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #signInWithPassword,
            [],
            {
              #email: email,
              #phone: phone,
              #password: password,
              #captchaToken: captchaToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #signInWithPassword,
            [],
            {
              #email: email,
              #phone: phone,
              #password: password,
              #captchaToken: captchaToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<_i2.OAuthResponse> getOAuthSignInUrl({
    required _i2.Provider? provider,
    String? redirectTo,
    String? scopes,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOAuthSignInUrl,
          [],
          {
            #provider: provider,
            #redirectTo: redirectTo,
            #scopes: scopes,
            #queryParams: queryParams,
          },
        ),
        returnValue: _i4.Future<_i2.OAuthResponse>.value(_FakeOAuthResponse_3(
          this,
          Invocation.method(
            #getOAuthSignInUrl,
            [],
            {
              #provider: provider,
              #redirectTo: redirectTo,
              #scopes: scopes,
              #queryParams: queryParams,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.OAuthResponse>.value(_FakeOAuthResponse_3(
          this,
          Invocation.method(
            #getOAuthSignInUrl,
            [],
            {
              #provider: provider,
              #redirectTo: redirectTo,
              #scopes: scopes,
              #queryParams: queryParams,
            },
          ),
        )),
      ) as _i4.Future<_i2.OAuthResponse>);
  @override
  _i4.Future<_i2.AuthResponse> exchangeCodeForSession(String? authCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #exchangeCodeForSession,
          [authCode],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #exchangeCodeForSession,
            [authCode],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #exchangeCodeForSession,
            [authCode],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<_i2.AuthResponse> signInWithIdToken({
    required _i2.Provider? provider,
    required String? idToken,
    String? accessToken,
    String? nonce,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithIdToken,
          [],
          {
            #provider: provider,
            #idToken: idToken,
            #accessToken: accessToken,
            #nonce: nonce,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #signInWithIdToken,
            [],
            {
              #provider: provider,
              #idToken: idToken,
              #accessToken: accessToken,
              #nonce: nonce,
              #captchaToken: captchaToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #signInWithIdToken,
            [],
            {
              #provider: provider,
              #idToken: idToken,
              #accessToken: accessToken,
              #nonce: nonce,
              #captchaToken: captchaToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<void> signInWithOtp({
    String? email,
    String? phone,
    String? emailRedirectTo,
    bool? shouldCreateUser,
    Map<String, dynamic>? data,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithOtp,
          [],
          {
            #email: email,
            #phone: phone,
            #emailRedirectTo: emailRedirectTo,
            #shouldCreateUser: shouldCreateUser,
            #data: data,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.AuthResponse> verifyOTP({
    String? email,
    String? phone,
    required String? token,
    required _i2.OtpType? type,
    String? redirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOTP,
          [],
          {
            #email: email,
            #phone: phone,
            #token: token,
            #type: type,
            #redirectTo: redirectTo,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #verifyOTP,
            [],
            {
              #email: email,
              #phone: phone,
              #token: token,
              #type: type,
              #redirectTo: redirectTo,
              #captchaToken: captchaToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #verifyOTP,
            [],
            {
              #email: email,
              #phone: phone,
              #token: token,
              #type: type,
              #redirectTo: redirectTo,
              #captchaToken: captchaToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<_i2.AuthResponse> refreshSession() => (super.noSuchMethod(
        Invocation.method(
          #refreshSession,
          [],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #refreshSession,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #refreshSession,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<void> reauthenticate() => (super.noSuchMethod(
        Invocation.method(
          #reauthenticate,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.ResendResponse> resend({
    String? email,
    String? phone,
    required _i2.OtpType? type,
    String? emailRedirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resend,
          [],
          {
            #email: email,
            #phone: phone,
            #type: type,
            #emailRedirectTo: emailRedirectTo,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<_i2.ResendResponse>.value(_FakeResendResponse_4(
          this,
          Invocation.method(
            #resend,
            [],
            {
              #email: email,
              #phone: phone,
              #type: type,
              #emailRedirectTo: emailRedirectTo,
              #captchaToken: captchaToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.ResendResponse>.value(_FakeResendResponse_4(
          this,
          Invocation.method(
            #resend,
            [],
            {
              #email: email,
              #phone: phone,
              #type: type,
              #emailRedirectTo: emailRedirectTo,
              #captchaToken: captchaToken,
            },
          ),
        )),
      ) as _i4.Future<_i2.ResendResponse>);
  @override
  _i4.Future<_i2.UserResponse> updateUser(
    _i2.UserAttributes? attributes, {
    String? emailRedirectTo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [attributes],
          {#emailRedirectTo: emailRedirectTo},
        ),
        returnValue: _i4.Future<_i2.UserResponse>.value(_FakeUserResponse_5(
          this,
          Invocation.method(
            #updateUser,
            [attributes],
            {#emailRedirectTo: emailRedirectTo},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.UserResponse>.value(_FakeUserResponse_5(
          this,
          Invocation.method(
            #updateUser,
            [attributes],
            {#emailRedirectTo: emailRedirectTo},
          ),
        )),
      ) as _i4.Future<_i2.UserResponse>);
  @override
  _i4.Future<_i2.AuthResponse> setSession(String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSession,
          [refreshToken],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #setSession,
            [refreshToken],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #setSession,
            [refreshToken],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
  @override
  _i4.Future<_i2.AuthSessionUrlResponse> getSessionFromUrl(
    Uri? originUrl, {
    bool? storeSession = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionFromUrl,
          [originUrl],
          {#storeSession: storeSession},
        ),
        returnValue: _i4.Future<_i2.AuthSessionUrlResponse>.value(
            _FakeAuthSessionUrlResponse_6(
          this,
          Invocation.method(
            #getSessionFromUrl,
            [originUrl],
            {#storeSession: storeSession},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.AuthSessionUrlResponse>.value(
            _FakeAuthSessionUrlResponse_6(
          this,
          Invocation.method(
            #getSessionFromUrl,
            [originUrl],
            {#storeSession: storeSession},
          ),
        )),
      ) as _i4.Future<_i2.AuthSessionUrlResponse>);
  @override
  _i4.Future<void> signOut(
          {_i2.SignOutScope? scope = _i2.SignOutScope.global}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
          {#scope: scope},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> resetPasswordForEmail(
    String? email, {
    String? redirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPasswordForEmail,
          [email],
          {
            #redirectTo: redirectTo,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.AuthResponse> recoverSession(String? jsonStr) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoverSession,
          [jsonStr],
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #recoverSession,
            [jsonStr],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_2(
          this,
          Invocation.method(
            #recoverSession,
            [jsonStr],
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);
}

/// A class which mocks [AuthResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthResponse extends _i1.Mock implements _i2.AuthResponse {}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i5.User {
  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  @override
  _i4.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Response>.value(_FakeResponse_7(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i3.Response>);
  @override
  _i4.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub:
            _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i4.Future<_i7.Uint8List>);
  @override
  _i4.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i4.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i4.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
